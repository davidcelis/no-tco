/**
 * Expands a given url by using a hosted application that routes
 * incoming urls through a node library called unfurl-url.
 * @param  {string}   url      URL to be expanded
 * @param  {Function} callback Callback to be called whenever expansion succeeds or fails.
 * @return {undefined}         Nothing.
 */
var unfurl = function(url, callback) {
  var request = new XMLHttpRequest();
  request.open('GET', 'https://urlexpand.herokuapp.com/' + url, true);

  request.onload = function() {
    if (request.status >= 200 && request.status < 400) {
      try {
        var data = JSON.parse(request.responseText);
        if(data.status === 'ok') {
          callback(null, data.result);
        } else {
          callback(new Error('Request failed. Urlexpand may be down.'), null);
        }
      } catch(ex) {
        callback(ex, null);
      }
    } else {
      callback(new Error('Status code: ' + request.status), null);
    }
  };

  request.onerror = function(ex) {
    callback(ex, null);
  };

  request.send();
}

var noTco = (function() {
  "use strict";
  var cachedLocations = {};

  /**
   * Checks if the target page a user is navigating to is t.co.
   * If so, checks if the url has already been visited in this session, and then redirects
   * them. If the expansion fails for any reason, the result is also cached to prevent further
   * attempts, and the user is redirected to the original t.co url.
   * @param  {BeforeNavidationEvent} event The navigation event generated by Safari
   * @return {undefined}                   Nothing
   */
  var checkDestinationUrl = function(event) {
    if(event.url && event.url.indexOf('https://t.co') === 0 && cachedLocations[event.url] !== 'error') {
      event.preventDefault();
      var cachedResult = cachedLocations[event.url];
      if(cachedResult && cachedResult != 'error') {
        event.target.url = cachedResult;
        return;
      } else {
        var encodedUrl = encodeURIComponent(event.url);
        unfurl(encodedUrl, function(err, res) {
          if(err || !res) {
            cachedLocations[event.url] = 'error'
            event.target.url = event.url;
          } else {
            cachedLocations[event.url] = res;
            event.target.url = res;
          }
        });
      }
    }
  }

  /**
   * Installs a beforeNavigation listener
   * @return {undefined} Nothing
   */
  var installEvents = function() {
    safari.application.addEventListener("beforeNavigate", checkDestinationUrl, true);
  }

  return {
    installEvents: installEvents
  };
})();

noTco.installEvents();
